from PyQt5.QtWidgets import QApplication, QWidget, QLabel, QLineEdit, QHBoxLayout, QVBoxLayout, QPushButton, QMessageBox
from PyQt5.QtCore import *
from PyQt5.QtGui import QFont
from instr import *

class Person():
    def __init__(self, name, age):
        self.name = name
        self.age = age

class Experiment():
    def __init__(self, person, test1, test2, test3):
        self.person = person
        self.test1 = test1
        self.test2 = test2
        self.test3 = test3

#инициализация глобальных переменных
name = ''
age = 7
p1, p2, p3 = 0, 0, 0

win_x, win_y = 200, 100
win_w, win_h = 1000, 600

txt_title = 'Тест Руфье'


def error_int(intg):
    try:
        return int(intg)
    except:
        return False



#1 экран
class InstrScr(QWidget):
    def __init__(self):
        super().__init__()

        self.initUi()
        self.connects()
        self.set_appear()
        self.show()

    def initUi(self):
        #создание кнопок
        self.lbl_instr = QLabel(txt_instruction)
        self.lbl_instr.setFont(QFont(None, 14))        
        self.lbl_name = QLabel('введите имя:')
        self.lbl_name.setFont(QFont(None, 16))
        self.inp_name = QLineEdit()
        self.lbl_age = QLabel('введите возраст:')
        self.lbl_age.setFont(QFont(None, 16))
        self.inp_age = QLineEdit('7')
        self.btn = QPushButton('начать')
        self.btn.setFont(QFont(None, 14))
        self.btn.setStyleSheet('background-color: rgb(222, 237, 57);')       

        #layout
        self.v_line = QVBoxLayout()
        self.h_line_name = QHBoxLayout()
        self.h_line_age = QHBoxLayout()
        #размещение виджетов по линиям
        self.h_line_name.addWidget(self.lbl_name)
        self.h_line_name.addWidget(self.inp_name)

        self.h_line_age.addWidget(self.lbl_age)
        self.h_line_age.addWidget(self.inp_age)        

        self.v_line.addStretch(1)
        self.v_line.addWidget(self.lbl_instr)
        self.v_line.addStretch(1)        
        self.v_line.addLayout(self.h_line_name)
        self.v_line.addLayout(self.h_line_age)
        self.v_line.addWidget(self.btn, alignment = Qt.AlignCenter)

        self.setLayout(self.v_line)

    def connects(self):
        self.btn.clicked.connect(self.next_click)


    def next_click(self):
        global name, age
        name = self.inp_name.text()
        age = error_int(self.inp_age.text())
        if age == False or age < 7:
            msg = QMessageBox()
            msg.setWindowTitle('Ошибка ввода возраста.')
            msg.setText('Возраст должен быть больше 7 лет и состоять из цифр.')
            msg.setIcon(QMessageBox.Warning)
            msg.exec_()
            age = 7
            self.inp_age.setText(str(age))        
        else:
            self.tw = BefPulsScr()
            self.hide()

    
    def set_appear(self):
        self.setWindowTitle(txt_title)
        self.resize(win_w, win_h)
        self.move(win_x, win_y)
        self.setStyleSheet('background-color: rgb(57, 250, 227);')

#2 экран
class BefPulsScr(QWidget):
    def __init__(self):
        super().__init__()

        self.initUi()
        self.connects()
        self.set_appear()
        self.show()
    
    def set_appear(self):
        self.setWindowTitle(txt_title)
        self.resize(win_w, win_h)
        self.move(win_x, win_y)
        self.setStyleSheet('background-color: rgb(57, 237, 237);')

    def initUi(self):
        self.init = QLabel(txt_starttest1)
        self.init.setFont(QFont(None, 14))
        self.text_p1 = QLabel('Введите результат:')
        self.text_p1.setFont(QFont(None, 16))
        self.line_p1 = QLineEdit('0')
        self.line_p1.setFont(QFont(None, 14))
        self.btn_next = QPushButton(txt_next, self)
        self.btn_next.setFont(QFont(None, 14))
        self.btn_next.setStyleSheet('background-color: rgb(222, 237, 57);') 

        self.h1_line = QHBoxLayout()
        self.h1_line.addWidget(self.text_p1)
        self.h1_line.addWidget(self.line_p1)
        self.v1_line = QVBoxLayout()
        self.v1_line.addWidget(self.init, alignment = Qt.AlignCenter)
        self.v1_line.addLayout(self.h1_line)
        self.v1_line.addWidget(self.btn_next, alignment = Qt.AlignCenter)
        self.setLayout(self.v1_line)
    
    def connects(self):
        self.btn_next.clicked.connect(self.next_click)
    
    def next_click(self):
        global p1
        p1 = error_int(self.line_p1.text())
        
        
        if p1 == False or p1 <= 0:
            msg = QMessageBox()
            msg.setWindowTitle('Ошибка ввода замеров пульса.')
            msg.setText('Значения первого замера пульса введено некорректно.')
            msg.setIcon(QMessageBox.Warning)
            msg.exec_()
            p1 = 0
            self.line_p1.setText(str(p1))        
        else:
            self.tw = CheckSitsScr()
            self.hide()
  
#3 экран
class CheckSitsScr(QWidget):
    def __init__(self):
        super().__init__()

        self.initUi()
        self.connects()
        self.set_appear()
        self.show()
    
    def set_appear(self):
        self.setWindowTitle(txt_title)
        self.resize(win_w, win_h)
        self.move(win_x, win_y)
        self.setStyleSheet('background-color: rgb(57, 250, 227);')

    def initUi(self):
        self.instr = QLabel(txt_starttest2)
        self.instr.setFont(QFont(None, 14))
        self.btn_next = QPushButton('Продолжить', self)
        self.btn_next.setFont(QFont(None, 14))
        self.btn_next.setStyleSheet('background-color: rgb(222, 237, 57);')         

        self.lay_line = QVBoxLayout()
        self.lay_line.addWidget(self.instr, alignment = Qt.AlignCenter)
        self.lay_line.addWidget(self.btn_next, alignment = Qt.AlignCenter)
        self.setLayout(self.lay_line)
    
    def connects(self):
        self.btn_next.clicked.connect(self.next_click)
    
    def next_click(self):
        self.tw = AftPulsScr()
        self.hide()


#4 экран
class AftPulsScr(QWidget):
    def __init__(self):
        super().__init__()

        self.initUi()
        self.connects()
        self.set_appear()
        self.show()
    
    def set_appear(self):
        self.setWindowTitle(txt_title)
        self.resize(win_w, win_h)
        self.move(win_x, win_y)
        self.setStyleSheet('background-color: rgb(57, 216, 237);')

    def initUi(self):
        #создание кнопок
        self.lbl_instr = QLabel(txt_test3)
        self.lbl_instr.setFont(QFont(None, 14))
        self.lbl_p2 = QLabel('введите результат:')
        self.lbl_p2.setFont(QFont(None, 16))
        self.inp_p2 = QLineEdit('0')
        self.inp_p2.setFont(QFont(None, 16))
        self.lbl_p3 = QLabel('введите результат после отдыха:')
        self.lbl_p3.setFont(QFont(None, 16))
        self.inp_p3 = QLineEdit('0')
        self.inp_p3.setFont(QFont(None, 16))
        self.btn = QPushButton('Завершить')
        self.btn.setFont(QFont(None, 14))
        self.btn.setStyleSheet('background-color: rgb(222, 237, 57);') 
        #layout
        self.v_line = QVBoxLayout()
        self.h_line_p1 = QHBoxLayout()
        self.h_line_p2 = QHBoxLayout()
        #размещение виджетов по линиям
        self.h_line_p1.addWidget(self.lbl_p2)
        self.h_line_p1.addWidget(self.inp_p2)

        self.h_line_p2.addWidget(self.lbl_p3)
        self.h_line_p2.addWidget(self.inp_p3)        

        self.v_line.addWidget(self.lbl_instr)
        self.v_line.addLayout(self.h_line_p1)
        self.v_line.addLayout(self.h_line_p2)
        self.v_line.addWidget(self.btn, alignment = Qt.AlignCenter)

        self.setLayout(self.v_line)
    
    def connects(self):
        self.btn.clicked.connect(self.next_click)
    
    def next_click(self):
        global p2, p3
        p2 = error_int(self.inp_p2.text())
        p3 = error_int(self.inp_p3.text())


        if p2 == False or p2 <= 0 :
            msg = QMessageBox()
            msg.setWindowTitle('Ошибка ввода замеров пульса.')
            msg.setText('Значения второго замера пульса введено некорректно.')
            msg.setIcon(QMessageBox.Warning)
            msg.exec_()
            p2 = 0
            self.inp_p2.setText(str(p2))        
        elif p3 == False or p3 <= 0 :
            msg = QMessageBox()
            msg.setWindowTitle('Ошибка ввода замеров пульса.')
            msg.setText('Значения третьего замера пульса введено некорректно.')
            msg.setIcon(QMessageBox.Warning)
            msg.exec_()
            p3 = 0
            self.inp_p3.setText(str(p3)) 
        
        else:
            self.tw = ResScr()
            self.hide()
#5 экран 
class ResScr(QWidget):
    def __init__(self):
        super().__init__()

        self.initUi()
        self.set_appear()
        self.show()
    
    def result(self):
        #color = 0
        if age < 7:
            self.index = 0
            return 'нет данных для такого возраста ይትን ልፍይይስ[ ልክዝ ንፍርጁጅ ድጅፕህፍችንፍ'
        self.index = (4 * (int(p1) + int(p2) + int(p3)) - 200)/10
        if age == 7 or age == 8:
            if self.index >= 21:
                return txt_res1
                #color = red
            elif self.index < 21 and self.index >= 17:
                return txt_res2   
                #color = orange
            elif self.index < 17 and self.index >= 12:
                return txt_res3
                #color = hh    
            elif self.index < 12 and self.index >= 6.5:
                return txt_res4
                #color = dark_green   
            return txt_res5
                #color = green
        if age == 9 or age == 10:
            if self.index >= 19.5:
                return txt_res1
            elif self.index < 19.5 and self.index >= 15.5:
                return txt_res2    
            elif self.index < 15.5 and self.index >= 10.5:
                return txt_res3        
            elif self.index < 10.5 and self.index >= 5:
                return txt_res4      
            return txt_res5     
    
        if age == 11 or age == 12:
            if self.index >= 18:
                return txt_res1
            elif self.index < 18 and self.index >= 14:
                return txt_res2    
            elif self.index < 14 and self.index >= 9:
                return txt_res3        
            elif self.index < 9 and self.index >= 3.5:
                return txt_res4      
            return txt_res5     
    
        if age == 13 or age == 14:
            if self.index >= 16.5:
                return txt_res1
            elif self.index < 16.5 and self.index >= 12.5:
                return txt_res2    
            elif self.index < 12.5 and self.index >= 7.5:
                return txt_res3        
            elif self.index < 7.5 and self.index >= 2:
                return txt_res4      
            return txt_res5 


        if age >= 15:
            if self.index >= 15:
                return txt_res1
            elif self.index < 15 and self.index >= 11:
                return txt_res2    
            elif self.index < 11 and self.index >= 6:
                return txt_res3        
            elif self.index < 6 and self.index >= 0.5:
                return txt_res4      
            return txt_res5 

    def set_appear(self):
        self.setWindowTitle(txt_title)
        self.resize(win_w, win_h)
        self.move(win_x, win_y)
        self.setStyleSheet('background-color: rgb(57, 204, 237);')


    def initUi(self):
        #создание кнопок
        self.w_text = QLabel(name + txt_workheart + self.result())
        self.w_text.setFont(QFont(None, 16))
        self.lbl_p2 = QLabel(txt_index + str(self.index))
        self.lbl_p2.setFont(QFont(None, 16))


        self.lay_line = QVBoxLayout()
        self.lay_line.addWidget(self.w_text, alignment = Qt.AlignCenter)
        self.lay_line.addWidget(self.lbl_p2, alignment = Qt.AlignCenter)
        self.setLayout(self.lay_line)

app = QApplication([])
main_win = InstrScr()
app.exec_()
